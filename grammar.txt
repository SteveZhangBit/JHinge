Grammar of Hinge (LL1)

file_input
	: (Newline | statement)*

statement
	: simple_stmt Newline
	| if_stmt
	| while_stmt
	| for_stmt
	| do_while_stmt
	| funcdef
	| classdef

suite
	: [Newline] (statement | "{" (statement | Newline)* "}")
	
brace_suite
	: [Newline] "{" (statement | Newline)* "}"

if_stmt
	: "if" expression suite
	("else" "if" expression suite)*
	["else" suite]

while_stmt
	: "while" expression suite

for_stmt
	: "for" primary "in" expression_list suite
	
do_while_stmt
	: "do" brace_suite "while" expression Newline

funcdef
	: "func" Identifier "(" [parameter_list] ")" brace_suite

parameter_list
	: defparameter ("," defparameter)*

defparameter
	: Identifier ["=" expression]

classdef
	: "class" Identifier [":" expression_list] brace_suite

simple_stmt
	: expression_list expression_stmt
	| "return" [expression_list]
	| "break"
	| "continue"

expression_stmt
	: "=" expression_list		-> assignment
	| augop expression_list		-> augmented assignment
	| E

augop
	: "+=" | "-=" | "*=" | "/=" | "%=" | "**="
	| ">>=" | "<<=" | "&=" | "|=" | "^="

expression_list
	: expression ("," expression)*

expression
	: or_test ["if" or_test "else" expression]

or_test
	: and_test or_test_more

or_test_more
	: "or" and_test or_test_more
	| E

and_test
	: not_test and_test_more

and_test_more
	: "and" not_test and_test_more
	| E

not_test
	: comparison
	| "not" not_test

comparison
	: or_expr [comp_operator or_expr]

comp_operator
	: "<" | "<=" | ">" | ">=" | "!=" | "=="
	| "in" | "not" "in"
	| "is" ("not" | E)

or_expr
	: xor_expr or_expr_more

or_expr_more
	: "|" xor_expr or_expr_more
	| E

xor_expr
	: and_expr xor_expr_more

xor_expr_more
	: "^" and_expr xor_expr_more
	| E

and_expr
	: shift_expr and_expr_more

and_expr_more
	: "&" shift_expr and_expr_more
	| E

shift_expr
	: a_expr shift_expr_more

shift_expr_more
	: "<<" a_expr shift_expr_more
	| ">>" a_expr shift_expr_more
	| E

a_expr
	: m_expr a_expr_more

a_expr_more
	: "+" m_expr a_expr_more
	| "-" m_expr a_expr_more
	| E

m_expr
	: u_expr m_expr_more

m_expr_more
	: "*" u_expr m_expr_more
	| "/" u_expr m_expr_more
	| "%" u_expr m_expr_more
	| E

u_expr
	: power
	| "-" u_expr
	| "+" u_expr
	| "~" u_expr

power
	: primary ["**" u_expr]

primary
	: atom primary_arg

primary_arg
	: "." Identifier primary_arg
	| "[" expression_list "]" primary_arg		-> indexing
	| "(" [expression_list] ")" primary_arg		-> call
	| E

atom
	: Identifier
	| String
	| Integer
	| LongInteger
	| Float
	| "(" expression_list ")"
